/*
 * Create a decorator to style your Lit components with a base style.
 *
 * `styles` should be a CSS object generated by Lit's `css` function.
 *
 * Example usage:
 *
 *     import { litStyle } from 'lit-element-style';
 *     import { LitElement, css } from 'lit-element';
 *
 *     const myStyles = litStyle(css`h1 { color: red; }`);
 *
 *     class MyComponent extends myStyles(LitElement) {
 *         // ...
 *     }
 */
export function litStyle(styles) {

    const func = wrappedEl => {

        // This allows to use a `litStyle()` generated function to extend
        // another stylesheet:
        //
        //   const basicStyle = litStyle(css`p { font-size: 3px; }`);
        //   const extendedStyle = basicStyle(css`input { font-size: 2px; }`);
        if (typeof wrappedEl === 'object' && 'cssText' in wrappedEl) {
            return litStyle([styles, wrappedEl]);
        }

        return class extends wrappedEl {

            static getStyles() {

                const superStyles = super.getStyles();

                // Note: the `superStyles` are put in front of `styles`, so
                // that `styles` will get precedence for CSS selectors that
                // have an equal relevance. Because in CSS, rules that appear
                // later override rules that appear earlier.
                if (!superStyles) {
                    return styles;
                } else if (Array.isArray(superStyles)) {
                    return [...superStyles, styles];
                } else {
                    return [superStyles, styles];
                }

            }

        }

    };

    // This allows you to access the original CSS object like this:
    //
    //     cssObj = css`h1 { color: red; }`;
    //     const myStyles = litStyle(cssObj);
    //     myStyles.css === cssObj;
    func.css = styles;

    return func;

}
